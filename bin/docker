#!/usr/bin/env bash

__help() {
cat <<END_OF_HELP
Usage: ${0} <commands> [options]
Where supported commands are:

  build [image:]<tag> [docker-build-options] [-- build-context-path]
            Builds a new container image using 'docker build' command.
            See 'docker build --help' for a list of supported options.

            If DOCKER_CLI_EXPERIMENTAL environment variable is set then
            the image will be built using BuildKit's `buildx` command.

  run [image:]<tag> [docker-run-options --] [shell-command]
            Run a command in a new container with 'docker container run'.
            Container-run options are preconfigured, user input is executed.

  exec [image:]<tag|container_id> [docker-exec-options --] [shell-command]
            Executes a command in the latest container launched from the image.
            See 'docker container exec --help' for more information.

  attach [image:]<tag|container_id> [docker-attach-options]
            Attaches input/output streams to the latest running container.
            See 'docker container attach --help' for all supported options.

  stop [image:]<tag|container_id> [docker-stop-options]
            Stops all running containers based on the application's image.
            See 'docker container stop --help' for more information.
END_OF_HELP
}

container_ids() {
  local container_id="$(docker container ls -qlf "id=${TAG}")"
  if [[ -n "${container_id}" ]]; then
    echo "${container_id}"
  else
    docker container ls --quiet --filter "ancestor=${IMAGE}" "${@}"
  fi
}

container_id() {
  container_ids "--latest"
}

COMMAND="${1:-help}"
if [[ -z "${2}" || "${2}" == '-'* ]]; then
  IMAGE="$(echo "${PWD##*/}" | tr '[:upper:] ' '[:lower:]-')"
  TAG="latest"
  shift 1
elif [[ "${2}" == *':'* ]]; then
  IMAGE="${2}"
  TAG="${2##*:}"
  shift 2
elif [[ "${2}" == *'/'* ]]; then
  IMAGE="${2}"
  TAG="latest"
  shift 2
elif [[ -n "${2}" ]]; then
  IMAGE="$(echo "${PWD##*/}" | tr '[:upper:] ' '[:lower:]-'):${2}"
  TAG="${2}"
  shift 2
else
  echo "Invalid argument -- ${2}" >&2
  echo "  - IMAGE: ${IMAGE}" >&2
  echo "  - TAG:   ${TAG}" >&2
  exit 1
fi

DOCKER_ARGS=()
USER_ARGS=()
case "${*}" in
  '-- '*)
    USER_ARGS+=( "${@:2}" )
    shift ${#}
    ;;
  *' -- '*)
    INDEX=$(printf '%s\n' "${@}" | awk '/--/{print NR;exit}')
    DOCKER_ARGS+=( "${@:1:${INDEX}-1}" )
    USER_ARGS+=( "${@:${INDEX}+1}" )
    shift ${#}
    ;;
  *' --')
    DOCKER_ARGS+=( "${@:1:${#}-1}" )
    shift ${#}
    ;;
esac

case "${COMMAND}" in
  'b'|'build') # -build_arg .
    grep -q "^FROM .* AS ${TAG}\$" Dockerfile || TAG=''
    DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} \
    ${DOCKER_CLI_EXPERIMENTAL:+DOCKER_BUILDKIT=1} \
      docker ${DOCKER_CLI_EXPERIMENTAL:+buildx} build \
      --tag "${IMAGE}" ${TAG:+--target "${TAG}"} \
      --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%TZ")" \
      --build-arg BUILD_SHA="$(git rev-parse HEAD)" \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} ${1:+"${@}"} \
      "${USER_ARGS[@]:-${PWD}}";
    ;;
  'r'|'run')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    docker container run --rm --init \
      --mount type=bind,source="${PWD}",target=/mnt,consistency=delegated \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "${IMAGE}" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${1:+"${@}"}
    ;;
  'e'|'exec')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    docker container exec \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_id)" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${1:+"${@}"}
    ;;
  'a'|'attach')
    docker container attach \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_id)"
    ;;
  's'|'stop')
    docker container stop \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_ids)"
    ;;
  '-?'|'--help'|'help')
    __help
    exit
    ;;
  *)
    echo "${0}: Unknown command -- ${COMMAND}" >&2
    exit 1
    ;;
esac
