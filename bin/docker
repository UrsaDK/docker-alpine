#!/usr/bin/env bash

__help() {
cat <<END_OF_HELP
Usage: ${0} <commands> [options]
Where supported commands are:

  build [image:]<tag> [docker-build-options] [-- build-context-path]
            Builds a new container image using 'docker build' command.
            See 'docker build --help' for a list of supported options.

            Use 'buildx' as the build command to build the image with BuildKit.
            See 'docker buildx build --help' for the list of supported options.

  run [image:]<tag> [docker-run-options --] [shell-command]
            Run a command in a new container with 'docker container run'.
            Container-run options are preconfigured, user input is executed.

  exec [image:]<tag|container_id> [docker-exec-options --] [shell-command]
            Executes a command in the latest container launched from the image.
            See 'docker container exec --help' for more information.

  attach [image:]<tag|container_id> [docker-attach-options]
            Attaches input/output streams to the latest running container.
            See 'docker container attach --help' for all supported options.

  stop [image:]<tag|container_id> [docker-stop-options]
            Stops all running containers based on the application's image.
            See 'docker container stop --help' for more information.

If 'image' value is omitted, then the script will fallback to using a lower cased name of the projects root directory, as identified by git.

This script will respect the value of DOCKER_BUILDKIT environment variables,
unless it's overridden by using 'buildx' command, which always uses BuildKit.
END_OF_HELP
}

container_ids() {
  local container_id="$(docker container ls -qlf "id=${TAG}")"
  if [[ -n "${container_id}" ]]; then
    echo "${container_id}"
  else
    docker container ls --quiet --filter "ancestor=${IMAGE}" "${@}"
  fi
}

container_id() {
  container_ids "--latest"
}

mount_volume() {
  : ${1:?Missing required argument -- volume name}
  local name="$(echo "${PRD##*/}" | tr '[:upper:] ' '[:lower:]-')_${1}"
  if echo " ${2}" | grep -qE ' -(v|-volume|-mount)[[:space:]=]'; then
    echo ""
  elif [[ -n "$(docker volume ls --quiet --filter "name=${name}")" ]]; then
    echo "--mount type=volume,source=${name},target=/mnt"
  else
    echo "--mount type=bind,source=${PRD},target=/mnt,consistency=delegated"
  fi
}

mutagen_volumes() {
  for volume in "$(yq eval \
      'del(.sync.defaults) | .sync | keys | .[]' \
      "${MUTAGEN_YML}")"; do
    echo "--mount type=volume,source=${volume},target=:/mnt/${volume}"
  done
}

update_docker_compose_override_yml() {
  local override_yml="${PRD}/docker-compose.override.yml"
  if [[ ! -f "${override_yml}" ]]; then
    yq eval --null-input '.version="3" | .volumes={}' > ${override_yml}
  fi
  yq eval-all --inplace \
    'select(fileIndex == 0) as $o
    | select(fileIndex == 1) | del(.sync.defaults)
    | .sync | keys | .[] as $i ireduce ({}; .[$i] = {})
    | $o.volumes = . * $o.volumes | $o | ... style=""' \
    "${override_yml}" "${MUTAGEN_YML}"
}

update_mutagen_yml() {
  : ${1:?Missing required argument -- mutagen container name}
  yq eval 'del(.sync.defaults) | .sync' "${MUTAGEN_YML}" \
    | sed "s#docker://.*_mutagen/#docker://${1}/#" \
    | yq eval-all --inplace \
      'select(fileIndex == 0) as $m
      | $m.sync = $m.sync * select(fileIndex == 1) | $m | ... style=""' \
      "${MUTAGEN_YML}" -
}

PRD="$(git rev-parse --show-toplevel)"

COMMAND="${1:-help}"
if [[ -z "${2}" || "${2}" == '-'* ]]; then
  IMAGE="$(echo "${PRD##*/}" | tr '[:upper:] ' '[:lower:]-')"
  TAG="latest"
  shift 1
elif [[ "${2}" == *':'* ]]; then
  IMAGE="${2}"
  TAG="${2##*:}"
  shift 2
elif [[ "${2}" == *'/'* ]]; then
  IMAGE="${2}"
  TAG="latest"
  shift 2
elif [[ -n "${2}" ]]; then
  IMAGE="$(echo "${PRD##*/}" | tr '[:upper:] ' '[:lower:]-'):${2}"
  TAG="${2}"
  shift 2
else
  echo "Invalid argument -- ${2}" >&2
  echo "  - IMAGE: ${IMAGE}" >&2
  echo "  - TAG:   ${TAG}" >&2
  exit 1
fi

DOCKER_ARGS=()
USER_ARGS=()
if [[ " ${*} " =~ " -- " ]]; then
  INDEX=$(printf '%s\n' "${@}" | awk '/--/{print NR;exit}')
  DOCKER_ARGS+=( "${@:1:${INDEX}-1}" )
  USER_ARGS+=( "${@:${INDEX}+1}" )
  shift ${#}
fi

case "${COMMAND}" in
  'b'|'build'|'buildx')
    grep -q "^FROM .* AS ${TAG}\$" Dockerfile || unset TAG
    [[ "${COMMAND}" == 'buildx' ]] && DOCKER_BUILDKIT=1 || unset COMMAND
    DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} docker ${COMMAND} build \
      --tag "${IMAGE}" \
      ${TAG:+--target "${TAG}"} \
      --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%TZ")" \
      --build-arg BUILD_SHA="$(git rev-parse HEAD)" \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} ${1:+"${@}"} \
      "${USER_ARGS[@]:-${PRD}}";
    ;;
  'r'|'run')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    docker container run --rm --init \
      $(mount_volume 'code' "${DOCKER_ARGS[*]}") \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "${IMAGE}" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${1:+"${@}"}
    ;;
  'e'|'exec')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    docker container exec \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_id)" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${1:+"${@}"}
    ;;
  'a'|'attach')
    docker container attach \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_id)"
    ;;
  's'|'stop')
    docker container stop \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(container_ids)"
    ;;

  'm'|'mutate')
    if [[ "${TAG}" == 'latest' ]]; then
      TAG='mutagen'
      IMAGE="${IMAGE%%:*}:${TAG}"
    fi
    MUTAGEN_YML="${PRD}/mutagen.yml"
    CONTAINER_NAME="${IMAGE%%:*}_mutagen"
    update_docker_compose_override_yml
    update_mutagen_yml "${CONTAINER_NAME}"
    "${0}" build "${IMAGE}"
    "${0}" run --name "${CONTAINER_NAME}" $(mutagen_volumes) -- "${IMAGE}"
    mutagen project start --project-file "${PRD}/mutagen.yml"
    ;;
  '-?'|'--help'|'help')
    __help
    exit
    ;;
  *)
    echo "${0}: Unknown command -- ${COMMAND}" >&2
    exit 1
    ;;
esac
