#!/usr/bin/env bash

__help() {
cat <<END_OF_HELP
Usage: ${0} <commands> [options]
Where supported commands are:

  build [image:]<tag> [docker-build-options] [-- build-context-path]
            Builds a new container image using 'docker build' command.
            See 'docker build --help' for a list of supported options.

            Use 'buildx' as the build command to build the image with BuildKit.
            See 'docker buildx build --help' for the list of supported options.

  run [image:]<tag> [docker-run-options --] [shell-command]
            Run a command in a new container with 'docker container run'.
            Container-run options are preconfigured, user input is executed.

  exec [image:]<tag|container_id> [docker-exec-options --] [shell-command]
            Executes a command in the latest container launched from the image.
            See 'docker container exec --help' for more information.

  attach [image:]<tag|container_id> [docker-attach-options]
            Attaches input/output streams to the latest running container.
            See 'docker container attach --help' for all supported options.

  stop [image:]<tag|container_id> [docker-stop-options]
            Stops all running containers based on the application's image,
            as well as the mutagen container, if one is running.
            See 'docker container stop --help' for more information.

  sync [image:]<tag>
            TODO

If 'image' value is omitted, then the script will fallback to using a lower cased name of the projects root directory, as identified by git.

This script will respect the value of DOCKER_BUILDKIT environment variables,
unless it's overridden by using 'buildx' command, which always uses BuildKit.
END_OF_HELP
}

default_tag() {
  if [[ "${COMMAND}" == 'sync' ]]; then
    echo 'mutagen'
  else
    echo 'latest'
  fi
}

arg_mount_volume_or_bind() {
  : "${1:?Missing required argument -- volume name}"
  local name arg_regex
  name="$(echo "${PRD##*/}" | tr '[:upper:] ' '[:lower:]-')_${1}"
  arg_regex=' -(v|-volume|-mount)[[:space:]=]'
  if echo " ${DOCKER_ARGS[*]}" | grep -qE "${arg_regex}"; then
    : # Do nothing if a custom volume argument is supplied
  elif [[ -n "$(docker volume ls --quiet --filter "name=${name}")" ]]; then
    echo "--mount type=volume,source=${name},target=/mnt"
  else
    echo "--mount type=bind,source=${PRD},target=/mnt,consistency=delegated"
  fi
}

latest_container_by_id_or_name_or_ancestor() {
  containers_by_id_or_ancestor "${@}" "--latest"
}

containers_by_id_or_name_or_ancestor() {
  : "${1:?Missing required argument -- container id or image name}"
  : "${1:+Optional argument -- docker container ls --help}"
  local container_id
  container_id="$(docker container ls -qlf "id=${1##*:}")"
  if [[ -n "${container_id}" ]]; then
    echo "${container_id}"
  else
    container_id="$(docker container ls -qlf "name=${1##*:}")"
    if [[ -n "${container_id}" ]]; then
      echo "${container_id}"
    else
      docker container ls --quiet --filter "ancestor=${1}" "${@:2}"
    fi
  fi
}

APP_ROOT="$(git rev-parse --show-toplevel)"
COMMAND="${1:-help}"

if [[ -z "${2}" || "${2}" == '-'* ]]; then
  IMAGE="$(echo "${APP_ROOT##*/}" | tr '[:upper:] ' '[:lower:]-')"
  TAG="$(default_tag)"
  shift 1
elif [[ "${2}" == *':'* ]]; then
  IMAGE="${2}"
  TAG="${2##*:}"
  shift 2
elif [[ "${2}" == *'/'* ]]; then
  IMAGE="${2}"
  TAG="$(default_tag)"
  shift 2
elif [[ -n "${2}" ]]; then
  IMAGE="$(echo "${APP_ROOT##*/}" | tr '[:upper:] ' '[:lower:]-'):${2}"
  TAG="${2}"
  shift 2
else
  echo "Invalid argument -- ${2}" >&2
  echo "  - IMAGE: ${IMAGE}" >&2
  echo "  - TAG:   ${TAG}" >&2
  exit 1
fi

DOCKER_ARGS=()
USER_ARGS=()
if [[ " ${*} " =~ " -- " ]]; then
  INDEX=$(printf '%s\n' "${@}" | awk '/--/{print NR;exit}')
  DOCKER_ARGS+=( "${@:1:${INDEX}-1}" )
  USER_ARGS+=( "${@:${INDEX}+1}" )
  shift ${#}
fi

case "${COMMAND}" in
  'b'|'build'|'buildx')
    grep -q "^FROM .* AS ${TAG}\$" Dockerfile || unset TAG
    if [[ "${COMMAND}" == 'buildx' ]]; then
      DOCKER_BUILDKIT=1
    else
      unset COMMAND
    fi
    DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} \
      docker ${COMMAND:+"buildx"} build \
      --tag "${IMAGE}" \
      ${TAG:+--target "${TAG}"} \
      --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%TZ")" \
      --build-arg BUILD_SHA="$(git rev-parse HEAD)" \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} ${@:+"${@}"} \
      "${USER_ARGS[@]:-${APP_ROOT}}";
    ;;
  'r'|'run')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    read -ra MOUNT_ARGS < <( arg_mount_volume_or_bind 'app' )
    docker container run --rm --init \
      ${MOUNT_ARGS[@]:+"${MOUNT_ARGS[@]}"} \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "${IMAGE}" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${@:+"${@}"}
    ;;
  'e'|'exec')
    [[ -t 1 ]] && DOCKER_ARGS+=( '-it' ) # Check if output is attached to a TTY
    docker container exec \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(latest_container_by_id_or_name_or_ancestor "${IMAGE}")" \
      ${USER_ARGS[@]:+"${USER_ARGS[@]}"} ${1:+"${@}"}
    ;;
  'a'|'attach')
    docker container attach \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(latest_container_by_id_or_name_or_ancestor "${IMAGE}")"
    ;;
  's'|'stop')
    docker container stop \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(containers_by_id_or_name_or_ancestor "${IMAGE}")"



    docker container stop \
      ${DOCKER_ARGS[@]:+"${DOCKER_ARGS[@]}"} \
      "$(containers_by_id_or_name_or_ancestor "${IMAGE%%:*}_mutagen")"
      "$(containers_by_id_or_name_or_ancestor "${IMAGE%%:*}:mutagen")"



    ;;
  *)
    echo "${0}: Unknown command -- ${COMMAND}" >&2
    exit 1
    ;;
esac
